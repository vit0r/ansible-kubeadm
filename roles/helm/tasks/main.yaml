- name: install python3-kubernetes
  package:
    update_cache: yes
    state: present
    name: python3-kubernetes

- name: install helm
  block:
    - name: download helm
      unarchive:
        src: https://get.helm.sh/helm-v{{ helm_version }}-linux-amd64.tar.gz
        dest: /tmp/
        remote_src: yes
        owner: "{{ ansible_ssh_user }}"
        group: "{{become_user}}"
        mode: "0770"
    - name: copy helm bin
      copy:
        src: /tmp/linux-amd64/helm
        dest: /usr/local/bin/helm
        remote_src: yes
        owner: "{{become_user}}"
        group: "{{become_user}}"
        mode: "0770"

- name: add repo helm cert-manager
  kubernetes.core.helm_repository:
    name: jetstack
    repo_url: "https://charts.jetstack.io"
    force_update: true

- name: deploy cert-manager
  kubernetes.core.helm:
    name: cert-manager
    chart_version: "1.17.1"
    chart_ref: jetstack/cert-manager
    release_namespace: cert-manager
    create_namespace: true
    wait: true
    values:
      installCRDs: true
      prometheus:
        enabled: true
      webhook:
        timeoutSeconds: 4

- name: create cluster issuer letsencrypt-nginx nginx
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: cert-manager.io/v1
      kind: ClusterIssuer
      metadata:
        name: letsencrypt-nginx-nginx
      spec:
        acme:
          email: jonasdbz9@gmail.com
          privateKeySecretRef:
            name: letsencrypt-nginx-nginx
          server: https://acme-v02.api.letsencrypt-nginx.org/directory
          solvers:
            - http01:
                ingress:
                  class: nginx

- name: create cluster issuer letsencrypt-traefik
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: cert-manager.io/v1
      kind: ClusterIssuer
      metadata:
        name: letsencrypt-traefik
      spec:
        acme:
          email: jonasdbz9@gmail.com
          privateKeySecretRef:
            name: letsencrypt-traefik
          server: https://acme-v02.api.letsencrypt-nginx.org/directory
          solvers:
            - http01:
                ingress:
                  class: traefik

- name: add repo helm chart nfs-subdir-external-provisioner
  kubernetes.core.helm_repository:
    name: "nfs-subdir-external-provisioner"
    repo_url: "https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner"
    force_update: true

- name: deploy nfs-subdir-external-provisioner
  kubernetes.core.helm:
    name: nfs-subdir-external-provisioner
    chart_version: "4.0.18"
    chart_ref: nfs-subdir-external-provisioner/nfs-subdir-external-provisioner
    release_namespace: nfs-subdir-external
    create_namespace: true
    wait: false
    values:
      storageClass:
        name: nfs
        defaultClass: true
      nfs:
        server: "{{ hostvars[groups['nfs_servers'][0]].inventory_hostname }}"
        path: "{{ nfs_path }}"
      archiveOnDelete: true

- name: add repo argo-helm
  kubernetes.core.helm_repository:
    name: argo
    repo_url: https://argoproj.github.io/argo-helm

- name: helm deploy argo
  kubernetes.core.helm:
    name: "argocd"
    chart_ref: "argo/argo-cd"
    release_namespace: "argocd"
    create_namespace: true
    update_repo_cache: true
    force: true
    wait: false
    values:
      fullnameOverride: argocd
      global:
        domain: argocd.otacon.local
        logging:
          level: error
      dex:
        enabled: false
      configs:
        params:
          "server.insecure": true
        cm:
          "users.anonymous.enabled": false
          "accounts.image-updater": apiKey
          "accounts.image-updater.enabled": true
          "accounts.vitor.enabled": true
          "accounts.vitor": login
          "admin.enabled": true
      rbac:
        policy.csv: |
          p, role:op, applications, get, */*, allow
          p, role:op, applications, logs, */*, allow
          p, role:op, applications, sync, */*, allow
          p, role:image-updater, applications, get, */*, allow
          p, role:image-updater, applications, update, */*, allow
          g, image-updater, role:image-updater
          g, vitor, role:admin
          g, admin, role:admin
        scopes: "[email, group]"
      server:
        ingress:
          enabled: true
          ingressClassName: nginx
      notifications:
        enabled: false

- name: helm deploy argocd-image-updater
  kubernetes.core.helm:
    name: "argocd-image-updater"
    chart_ref: "argo/argocd-image-updater"
    release_namespace: "argocd"
    create_namespace: true
    update_repo_cache: true
    force: true
    wait: false
    values:
      fullnameOverride: argocd-image-updater
      metrics:
        enabled: true
      config:
        gitCommitUser: vit0r
        # gitCommitMail: ""
        gitCommitTemplate: |
          build: argocd-image-updater apply {%raw%}{{ .AppName }}{%endraw%}
          {%raw%}{{ range .AppChanges -}}{%endraw%}
          updates image {%raw%}{{ .Image }}{%endraw%} tag '{%raw%}{{ .OldTag }}{%endraw%}' to '{%raw%}{{ .NewTag }}{%endraw%}'
          {%raw%}{{ end -}}{%endraw%}
        logLevel: info
        argocd:
          token: argocd-image-updater#token
        registries:
          - name: Docker Hub
            api_url: https://index.docker.io
            prefix: docker.io/vit0r
            defaultns: library
            ping: no
            credentials: secret:argocd/argocd-image-updater#credentials
            default: true

- name: helm deploy argo-rollouts
  kubernetes.core.helm:
    name: "argo-rollouts"
    chart_ref: "argo/argo-rollouts"
    release_namespace: "argocd"
    create_namespace: true
    update_repo_cache: true
    force: true
    wait: false
    values:
      dashboard:
        ingress:
          enabled: true
          annotations: {}
          labels: {}
          ingressClassName: nginx
          hosts:
            - argorollouts.otacon.local
          paths:
            - /
          pathType: Prefix
          tls:
            - secretName: argorollouts-otacon-tls
              hosts:
                - argorollouts.otacon.local

- name: helm deploy argo-workflows
  kubernetes.core.helm:
    name: "argo-workflows"
    chart_ref: "argo/argo-workflows"
    release_namespace: "argocd"
    create_namespace: true
    update_repo_cache: true
    force: true
    wait: false
    values:
      server:
        ingress:
          enabled: true
          annotations: {}
          ingressClassName: nginx
          hosts:
            - argoworkflows.otacon.local
          paths:
            - /
          pathType: Prefix
          tls:
            - secretName: argoworkflows-otacon-tls
              hosts:
                - argoworkflows.otacon.local

- name: add repo helm chart metallb
  kubernetes.core.helm_repository:
    name: metallb
    repo_url: "https://metallb.github.io/metallb"
    force_update: true

- name: deploy metallb
  kubernetes.core.helm:
    name: metallb
    chart_version: "0.14.9"
    chart_ref: metallb/metallb
    release_namespace: metallb-system
    create_namespace: true
    wait: true
    values:
      installCRDs: true

- name: add repo helm chart ingress-nginx
  kubernetes.core.helm_repository:
    name: ingress-nginx
    repo_url: "https://kubernetes.github.io/ingress-nginx"
    force_update: true

- name: deploy ingress-nginx
  kubernetes.core.helm:
    name: ingress-nginx
    chart_version: "4.12.2"
    chart_ref: ingress-nginx/ingress-nginx
    release_namespace: ingress-nginx
    create_namespace: true
    wait: false
    values:
      controller:
        extraArgs:
          "enable-ssl-passthrough": ""
        service:
          loadBalancerIP: "{{metallb_loadbalancer_ip_range.split('-')[0]}}"
          externalTrafficPolicy: "Local"
      tcp:
        3306: mariadb/mariadb:3306
        5432: postgresql/postgresql:5432
        6379: redis/redis-headless:6379
        26379: redis/redis-headless:26379
