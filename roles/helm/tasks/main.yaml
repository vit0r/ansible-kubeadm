- name: install helm
  block:
    - name: download helm
      unarchive:
        src: https://get.helm.sh/helm-v{{ helm_version }}-linux-amd64.tar.gz
        dest: /tmp/
        remote_src: yes
        owner: "{{ ansible_ssh_user }}"
        group: "{{become_user}}"
        mode: "0770"
    - name: copy helm bin
      copy:
        src: /tmp/linux-amd64/helm
        dest: /usr/local/bin/helm
        remote_src: yes
        owner: "{{become_user}}"
        group: "{{become_user}}"
        mode: "0770"

- name: add repo helm cert-manager
  kubernetes.core.helm_repository:
    name: jetstack
    repo_url: "https://charts.jetstack.io"
    force_update: yes

- name: deploy cert-manager
  kubernetes.core.helm:
    name: cert-manager
    chart_version: "1.17.1"
    chart_ref: jetstack/cert-manager
    release_namespace: cert-manager
    create_namespace: true
    wait: false
    values:
      installCRDs: true
      prometheus:
        enabled: true
      webhook:
        timeoutSeconds: 4

- name: add repo helm chart nfs-subdir-external-provisioner
  kubernetes.core.helm_repository:
    name: "nfs-subdir-external-provisioner"
    repo_url: "https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner"
    force_update: yes

- name: deploy nfs-subdir-external-provisioner
  kubernetes.core.helm:
    name: nfs-subdir-external-provisioner
    chart_version: "4.0.18"
    chart_ref: nfs-subdir-external-provisioner/nfs-subdir-external-provisioner
    release_namespace: nfs-subdir-external
    create_namespace: true
    wait: false
    values:
      storageClass:
        name: nfs
        defaultClass: true
      nfs:
        server: "{{ hostvars[groups['nfs_servers'][0]].inventory_hostname }}"
        path: "{{ nfs_path }}"
      archiveOnDelete: true

- name: add repo helm chart prometheus-community
  kubernetes.core.helm_repository:
    name: "prometheus-community"
    repo_url: "https://prometheus-community.github.io/helm-charts"
    force_update: yes

- name: deploy prometheus-node-exporter
  kubernetes.core.helm:
    name: prometheus-node-exporter
    chart_version: "4.39.0"
    chart_ref: prometheus-community/prometheus-node-exporter
    release_namespace: prometheus
    create_namespace: true
    wait: false

- name: add repo helm chart metrics-server
  kubernetes.core.helm_repository:
    name: "metrics-server"
    repo_url: "https://kubernetes-sigs.github.io/metrics-server/"
    force_update: yes

- name: deploy metrics-server
  kubernetes.core.helm:
    name: metrics-server
    chart_version: "3.12.2"
    chart_ref: metrics-server/metrics-server
    release_namespace: metrics-server
    create_namespace: true
    wait: false
    values:
      defaultArgs:
        - --cert-dir=/tmp
        - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        - --kubelet-use-node-status-port
        - --metric-resolution=15s
        - --kubelet-insecure-tls

- name: add repo helm chart kube-state-metrics
  kubernetes.core.helm_repository:
    name: "bitnami"
    repo_url: "https://charts.bitnami.com/bitnami"
    force_update: yes

- name: deploy kube-state-metrics
  kubernetes.core.helm:
    name: kube-state-metrics
    chart_version: "5.0.5"
    chart_ref: bitnami/kube-state-metrics
    release_namespace: kube-state-metrics
    create_namespace: true
    wait: false
    values:
      kubelet:
        insecureSkipTLSVerify: true

- name: deploy postgresql
  kubernetes.core.helm:
    name: postgresql
    chart_version: "16.6.3"
    chart_ref: bitnami/postgresql
    release_namespace: postgresql
    create_namespace: true
    wait: false

- name: add repo argo-helm
  kubernetes.core.helm_repository:
    name: argo
    repo_url: https://argoproj.github.io/argo-helm

- name: helm deploy argo
  kubernetes.core.helm:
    name: "argocd"
    chart_ref: "argo/argo-cd"
    release_namespace: "argocd"
    create_namespace: true
    update_repo_cache: true
    force: true
    wait: false
    values:
      configs:
        params:
          "server.insecure": true
        cm:
          "users.anonymous.enabled": false
          "users.session.duration": "48h"
          "admin.enabled": true
          url: http://argocd.local

# - name: deploy loki
#   kubernetes.core.helm:
#     name: loki
#     chart_version: "6.29.0"
#     chart_ref: grafana/loki
#     release_namespace: loki
#     create_namespace: true
#     wait: false

- name: add repo helm chart metallb
  kubernetes.core.helm_repository:
    name: metallb
    repo_url: "https://metallb.github.io/metallb"
    force_update: yes

- name: deploy metallb
  kubernetes.core.helm:
    name: metallb
    chart_version: "0.14.9"
    chart_ref: metallb/metallb
    release_namespace: metallb-system
    create_namespace: true
    wait: true
    values:
      installCRDs: true

- name: add repo helm chart ingress-nginx
  kubernetes.core.helm_repository:
    name: ingress-nginx
    repo_url: "https://kubernetes.github.io/ingress-nginx"
    force_update: yes

- name: deploy ingress-nginx
  kubernetes.core.helm:
    name: ingress-nginx
    chart_version: "4.12.2"
    chart_ref: ingress-nginx/ingress-nginx
    release_namespace: ingress-nginx
    create_namespace: true
    wait: false
    values:
      controller:
        service:
          loadBalancerIP: "{{metallb_loadbalancer_ip_range.split('-')[0]}}"
          externalTrafficPolicy: "Local"
# - name: add repo helm chart strimzi
#   kubernetes.core.helm_repository:
#     name: strimzi
#     repo_url: "https://strimzi.io/charts/"
#     force_update: yes

# - name: deploy strimzi-kafka-operator
#   kubernetes.core.helm:
#     name: strimzi
#     chart_version: "0.46.0"
#     chart_ref: strimzi/strimzi-kafka-operator
#     release_namespace: kafka
#     create_namespace: true
#     wait: true
#     force: yes
