- name: download helm
  unarchive:
    src: https://get.helm.sh/helm-v{{ helm_version }}-linux-amd64.tar.gz
    dest: /tmp/
    remote_src: yes
    owner: "{{ ansible_ssh_user }}"
    group: root
    mode: "0770"

- name: copy helm bin
  copy:
    src: /tmp/linux-amd64/helm
    dest: /usr/local/bin/helm
    remote_src: yes
    owner: "{{ ansible_ssh_user }}"
    group: root
    mode: "0770"

- name: add repo helm charts
  kubernetes.core.helm_repository:
    name: "{{ item.name }}"
    repo_url: "{{ item.repo_url }}"
  with_items:
    - {
        "name": "nfs-subdir-external-provisioner",
        "repo_url": "https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner",
      }
    - { "name": "metallb", "repo_url": "https://metallb.github.io/metallb" }
    - {
        "name": "prometheus-community",
        "repo_url": "https://prometheus-community.github.io/helm-charts",
      }
    - { "name": "grafana", "repo_url": "https://grafana.github.io/helm-charts" }
    - { "name": "jetstack", "repo_url": "https://charts.jetstack.io" }
    - {
        "name": "ingress-nginx",
        "repo_url": "https://kubernetes.github.io/ingress-nginx",
      }
    - {
        "name": "metrics-server",
        "repo_url": "https://kubernetes-sigs.github.io/metrics-server/",
      }
    - { "name": "hashicorp", "repo_url": "https://helm.releases.hashicorp.com" }
    - { "name": "argo", "repo_url": "https://argoproj.github.io/argo-helm" }

- name: deploy nfs-subdir-external-provisioner
  kubernetes.core.helm:
    name: nfs-subdir-external-provisioner
    chart_version: "4.0.18"
    chart_ref: nfs-subdir-external-provisioner/nfs-subdir-external-provisioner
    release_namespace: storage
    create_namespace: true
    wait: true
    values:
      storageClass:
        name: nfs
        defaultClass: true
      nfs:
        server: "{{ hostvars[groups['nfs_servers'][0]].inventory_hostname }}"
        path: "{{ nfs_path }}"
      archiveOnDelete: true

- name: helm deploy cert-manager
  kubernetes.core.helm:
    name: cert-manager
    chart_version: "v1.13.1"
    chart_ref: jetstack/cert-manager
    release_namespace: cert-manager
    create_namespace: true
    wait: false
    set_values:
      - value: installCRDs=true
        value_type: string

- name: helm deploy metallb
  kubernetes.core.helm:
    name: metallb
    chart_version: "0.13.12"
    chart_ref: metallb/metallb
    release_namespace: metallb-system
    create_namespace: true
    wait: false
    set_values:
      - value: installCRDs=true
        value_type: string

- name: put metallb template
  template:
    src: metallb.yaml.j2
    dest: /tmp/metallb.yaml
    mode: 0760

- name: kubectl wait for metallb-system initialize
  shell: kubectl wait --namespace metallb-system --for=condition=ready pod --selector=app.kubernetes.io/name=metallb --timeout=90s

- name: kubectl apply metallb IPAddressPool template
  shell: kubectl apply -f /tmp/metallb.yaml > metallb.log
  args:
    chdir: $HOME
    creates: metallb.log

- name: helm deploy metrics-server
  kubernetes.core.helm:
    name: metrics-server
    chart_version: "3.11.0"
    chart_ref: metrics-server/metrics-server
    release_namespace: metrics-server
    create_namespace: true
    wait: false

# - name: kubectl wait for metrics-server initialize
#   shell: kubectl wait --namespace metrics-server --for=condition=ready pod --selector=app.kubernetes.io/name=metrics-server --timeout=90s

- name: helm deploy ingress-nginx
  kubernetes.core.helm:
    name: ingress-nginx
    chart_version: "4.8.2"
    chart_ref: ingress-nginx/ingress-nginx
    release_namespace: ingress-nginx
    create_namespace: true
    wait: false
    values:
      controller:
        config:
          ssl-redirect: false
        service:
          externalTrafficPolicy: Local
          type: LoadBalancer

- name: helm deploy prometheus
  kubernetes.core.helm:
    name: prometheus
    chart_ref: prometheus-community/prometheus
    release_namespace: observability
    create_namespace: true
    wait: true
    values:
      server:
        ingress:
          enabled: true
          ingressClassName: nginx
          hosts:
            - prometheus.k8s.local

- name: helm deploy loki and grafana
  kubernetes.core.helm:
    name: "{{ item }}"
    chart_ref: "grafana/{{ item }}"
    release_namespace: observability
    create_namespace: true
    wait: true
    values:
      ingress:
        enabled: true
        ingressClassName: nginx
        hosts:
          - "{{  item }}.k8s.local"
      grafana:
        enabled: true
      datasources:
        datasources.yaml:
          datasources:
            - name: Loki
              type: loki
              url: http://loki-gateway.observability.svc.cluster.local
              isDefault: true
            - name: AlertManager
              type: alertmanager
              url: http://prometheus-alertmanager.observability.svc.cluster.local
              isDefault: false
            - name: Prometheus
              type: prometheus
              url: http://prometheus-server.observability.svc.cluster.local
              isDefault: false
      minio:
        enabled: true
      loki:
        auth_enabled: false
  with_items:
    - loki
    - grafana

- name: helm deploy hashicorp tools
  kubernetes.core.helm:
    name: "{{ item }}"
    chart_ref: "hashicorp/{{ item }}"
    release_namespace: "{{ item }}"
    create_namespace: true
    wait: true
    values:
      csi:
        enabled: true
      ui:
        enabled: true
        ingress:
          enabled: true
          ingressClassName: nginx
          hosts:
            - host: "{{ item }}.k8s.local"
              paths:
                - /
      server:
        ingress:
          enabled: true
          ingressClassName: nginx
          hosts:
            - host: "{{ item }}.k8s.local"
              paths:
                - /
  with_items:
    - vault
    - consul

- name: helm deploy argo tools
  kubernetes.core.helm:
    name: "{{ item }}"
    chart_ref: "argo/{{ item }}"
    release_namespace: "{{ item }}"
    create_namespace: true
    wait: true
    values:
      server:
        service:
          type: LoadBalancer
        ingress:
          enabled: true
          ingressClassName: nginx
          hosts:
            - "{{  item }}.k8s.local"
  with_items:
    - argo-cd
    - argo-workflows
